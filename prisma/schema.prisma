generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole
  needPasswordChange Boolean @default(true)
  status UserStatus @default(active)
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin Admin?
  doctor Doctor?
  patient Patient?

  @@map("users")
}


model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [email], references: [email])


  @@map("admins")
}


model Doctor {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  address String?
  registrationNumber String
  experience Int @default(0)
  gender Gender
  appointmentFee Int
  qualification String
  currentWorkingPlace String
  designation String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [email], references: [email])
  doctorSpecialties DoctorSpecialties[]
  doctorSchedules DoctorSchedules[]

  @@map("doctors")
}



model Patient {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(references: [email], fields: [email])
  patientHealthData PatientHealthData?
  medicalReport MedicalReport[]

  @@map("patients")
}



model Specialties {
  id String @id @default(uuid())
  title String @unique
  icon String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  doctorSpecialties DoctorSpecialties[]
  
  @@map("specialties")
}

model DoctorSpecialties {
  specialtiesId String
  specialties Specialties @relation(fields: [specialtiesId], references: [id])
  doctorId String
  doctors Doctor @relation(fields: [doctorId], references: [id])

  @@id([specialtiesId, doctorId]) //composite key
  @@map("doctor_specialties")
}




model PatientHealthData {
  id String @id @default(uuid())
  patientId String @unique 
  patient Patient @relation(fields: [patientId], references: [id])
  dateOfBirth DateTime
  gender Gender
  bloodGroup BloodGroup
  hasAllergies Boolean?
  hasDiabetes Boolean?
  height String
  weight String
  smokingStatus Boolean?
  dietaryPreferences String?
  pregnancyStatus Boolean?
  mentalHealthHistory String?
  immunizationStatus String?
  hasPastSurgeries Boolean?
  recentAnxiety Boolean?
  recentDepression Boolean?
  martialStatus MartialStatus @default(UNMARRIED)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("patient_health_data")
}



model MedicalReport {
  id String @id @default(uuid())
  patientId String
  patient Patient @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("medical_report")
}


model Schedule {
  id String @id @default(uuid())
  startDateTime DateTime
  endDateTime DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  doctorSchedules DoctorSchedules[]

  @@map("schedules")
}


model DoctorSchedules {
  doctorId String
  doctor Doctor @relation(fields: [doctorId], references: [id])

  scheduleId String
  schedule Schedule @relation(fields: [scheduleId], references: [id])

  isBooked Boolean @default(false)
  appointmentId String?


  @@id([doctorId, scheduleId]) //composite key

  @@map("doctor_schedules")
}



enum UserRole {
  super_admin
  admin
  doctor
  patient
}


enum UserStatus {
  active
  blocked
}


enum Gender {
  male
  female
}

//  bloodGroup: 'A+' | 'A-' | 'B+' | 'B-' | ' AB+' | 'AB-' | 'O+' | 'O-';

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum MartialStatus {
  MARRIED
  UNMARRIED
}